@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@implements IDisposable

@code {

    private bool IsAuthenticated { get; set; }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= HandleAuthStateChanged;
        GC.SuppressFinalize(this);
    }

    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += HandleAuthStateChanged;
    }

    private async void HandleAuthStateChanged(Task<AuthenticationState> authStateTask)
    {
        var authState = await authStateTask;
        var isAuthenticated = authState.User.Identity is { IsAuthenticated: true };

        if (IsAuthenticated == isAuthenticated)
            return;

        IsAuthenticated = isAuthenticated;

        if (IsAuthenticated)
        {
            NavManager.NavigateTo("");
        }
        else
        {
            NavManager.NavigateToLogin("login");
        }
    }
}
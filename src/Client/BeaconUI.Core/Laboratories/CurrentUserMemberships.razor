@using Beacon.Common.Laboratories
@using Beacon.Common.Laboratories.Events
@using Beacon.Common.Laboratories.Requests

@inject ISender Sender

@implements IDisposable

@if (CurrentUser is not null)
{
    @ChildContent?.Invoke(this)
}

@code {

    [CascadingParameter] public required Task<AuthenticationState> AuthStateTask { get; set; }
    [Parameter] public RenderFragment<CurrentUserMemberships>? ChildContent { get; set; }

    private AuthUserDto? CurrentUser { get; set; }
    private List<LaboratoryMembershipDto>? Memberships { get; set; }

    protected override void OnInitialized()
    {
        LaboratoryCreatedEvent.OnTrigger += Handle;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateTask;
        var currentUser = authState.User.ToAuthUserDto();

        if (currentUser?.Id != CurrentUser?.Id)
        {
            CurrentUser = currentUser;

            if (CurrentUser is not null)
            {
                var getMembershipsResult = await Sender.Send(new GetLaboratoryMembershipsByUserIdRequest { UserId = CurrentUser.Id });
                Memberships = getMembershipsResult.IsError ? null : getMembershipsResult.Value;                
            }
            else
            {
                Memberships = null;
            }
        }
    }

    public void Dispose()
    {
        LaboratoryCreatedEvent.OnTrigger -= Handle;
    }

    public IReadOnlyList<LaboratoryMembershipDto>? GetAll()
    {
        return Memberships?.AsReadOnly();
    }

    public LaboratoryMembershipDto? GetMembership(Guid labId)
    {
        return Memberships?.FirstOrDefault(m => m.LaboratoryId == labId);
    }

    private void Handle(LaboratoryCreatedEvent notification)
    {
        Console.WriteLine("Adding membership...");
        if (CurrentUser is null) return;

        Memberships?.Add(new LaboratoryMembershipDto
        {
            LaboratoryId = notification.Laboratory.Id,
            LaboratoryName = notification.Laboratory.Name,
            MemberId = CurrentUser.Id,
            MemberDisplayName = CurrentUser.DisplayName,
            MembershipType = "Admin"
        });

        StateHasChanged();
    }
}
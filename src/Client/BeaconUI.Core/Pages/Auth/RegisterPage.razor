@using Beacon.Common.Auth.Register
@using BeaconUI.Core.Auth

@page "/register"

@layout EmptyLayout

@inject BeaconAuthService AuthService
@inject NavigationManager NavManager

<div class="page-container">

    <div class="form-container text-center">

        <span class="text-primary mb-1 fs-2">
            <i class="fa-regular fa-flask-vial"></i>
        </span>

        <h3 class="fw-bold mb-4">
            <span>Create an account</span>
        </h3>

        <EditForm Model="Model" OnValidSubmit="Submit">

            <FluentValidationValidator />

            <fieldset disabled="@IsSubmitting">

                <div class="mb-3 text-start">
                    <label class="form-label" for="username">Display Name</label>
                    <InputText @bind-Value="Model.DisplayName" class="form-control" id="username" placeholder="e.g., jsparrow" />
                    <ValidationMessage For="() => Model.DisplayName" />
                </div>

                <div class="mb-3 text-start">
                    <label class="form-label" for="email">Email</label>
                    <InputText @bind-Value="Model.EmailAddress" class="form-control" id="email" placeholder="e.g., jsparrow@blackpearl.arg" />
                    <ValidationMessage For="() => Model.EmailAddress" />
                </div>

                <div class="mb-3 text-start">
                    <label class="form-label" for="password">Password</label>
                    <InputText @bind-Value="Model.Password" class="form-control" id="password" type="password" placeholder="**********" />
                    <ValidationMessage For="() => Model.Password" />
                </div>

                <button type="submit" class="btn btn-primary w-100 mb-3">Create Account</button>

                <div>
                    <span>Already have an account?</span>
                    <a href="login">Login</a>
                </div>

            </fieldset>
        </EditForm>

    </div>

</div>

@code {

    private RegisterRequest Model { get; set; } = new();

    private bool IsSubmitting { get; set; }

    private async Task Submit(EditContext editContext)
    {
        if (IsSubmitting) return;
        IsSubmitting = true;

        var response = await AuthService.Register(Model);

        response.Switch(
            success => NavManager.NavigateTo(""),
            validationProblem => AddServerValidationErrors(validationProblem)
        );

        IsSubmitting = false;
    }

    private void AddServerValidationErrors(ValidationProblemResponse validationProblem)
    {
        // TODO
    }
}
@page "/laboratories/{Id:guid}/members"
@attribute [Authorize]
@layout LaboratoryLayout

<LaboratoryPageHeader>
    <ButtonsContent>
        <button type="button" class="btn btn-primary" @onclick="ShowInviteMemberModal">
            <span class="icon">
                <i class="fa-solid fa-user-plus"></i>
            </span>
            <span>Invite member</span>
        </button>
    </ButtonsContent>
</LaboratoryPageHeader>
<LaboratoryPageContent>
    <div class="table-responsive h-100">
        <table class="table align-middle">
            <thead>
                <tr>
                    <th>Display Name</th>
                    <th>Email Address</th>
                    <th>Role</th>
                    <th style="width: 0%;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var memberGroup in Details.Members)
                {
                    foreach (var member in memberGroup.Value)
                    {
                        <tr>
                            <td>@member.DisplayName</td>
                            <td>
                                <a href="mailto:@member.EmailAddress">@member.EmailAddress</a>
                            </td>
                            <td>@memberGroup.Key</td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-small" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <span class="icon">
                                            <i class="fa-solid fa-ellipsis-vertical"></i>
                                        </span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            @if (CanManagePermissions && member.Id != CurrentUser?.Id)
                                            {
                                                <button class="dropdown-item">
                                                    <span class="icon">
                                                        <i class="fa-regular fa-pencil"></i>
                                                    </span>
                                                    <span>Manage Permissions</span>
                                                </button>
                                            }
                                            else
                                            {
                                                <a class="dropdown-item disabled">
                                                    <span class="icon">
                                                        <i class="fa-regular fa-pencil"></i>
                                                    </span>
                                                    <span>Manage Permissions</span>
                                                </a>
                                            }
                                        </li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</LaboratoryPageContent>

@code {

    [Parameter] public Guid Id { get; set; }
    [CascadingParameter] public required Task<AuthenticationState> AuthStateTask { get; set; }
    [CascadingParameter] public required LaboratoryDetailDto Details { get; set; }
    [CascadingParameter] private IModalService ModalService { get; set; } = null!;

    private AuthUserDto? CurrentUser { get; set; }
    private string CurrentUserMembershipType { get; set; } = string.Empty;

    private bool CanManagePermissions => CurrentUserMembershipType is "Admin" or "Manager";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        CurrentUser = authState.User.ToAuthUserDto();
        CurrentUserMembershipType = Details.Members.First(g => g.Value.Any(m => m.Id == CurrentUser?.Id)).Key;
    }

    private async Task ShowInviteMemberModal()
    {
        var modalParameters = new ModalParameters()
            .Add(nameof(InviteMemberForm.LaboratoryId), Id);

        await ModalService.Show<InviteMemberForm>("Invite Lab Member", modalParameters).Result;
    }
}
@page "/members"
@attribute [Authorize]

<LaboratoryPageHeader>
    <ButtonsContent>
        <button type="button" class="btn btn-primary" @onclick="ShowInviteMemberModal">
            <span class="icon">
                <i class="fa-solid fa-user-plus"></i>
            </span>
            <span>Invite member</span>
        </button>
    </ButtonsContent>
</LaboratoryPageHeader>
<LaboratoryPageContent>
    <div class="table-responsive h-100">
        <table class="table align-middle">
            <thead>
                <tr>
                    <th>Display Name</th>
                    <th>Email Address</th>
                    <th>Role</th>
                    <th style="width: 0%;"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var member in Details.Members)
                {
                    <tr>
                        <td>@member.DisplayName</td>
                        <td>
                            <a href="mailto:@member.EmailAddress">@member.EmailAddress</a>
                        </td>
                        <td>@member.MembershipType</td>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-small" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="icon">
                                        <i class="fa-solid fa-ellipsis-vertical"></i>
                                    </span>
                                </button>
                                <ul class="dropdown-menu">
                                    <li>
                                        @if (CanManagePermissions(member))
                                        {
                                            <button class="dropdown-item" type="button" @onclick="() => ShowManagePermissionsModal(member)">
                                                <span class="icon">
                                                    <i class="fa-regular fa-pencil"></i>
                                                </span>
                                                <span>Manage Permissions</span>
                                            </button>
                                        }
                                        else
                                        {
                                            <div class="dropdown-item disabled">
                                                <span class="icon">
                                                    <i class="fa-regular fa-pencil"></i>
                                                </span>
                                                <span>Manage Permissions</span>
                                            </div>
                                        }
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</LaboratoryPageContent>

@code {

    [CascadingParameter] public required Task<AuthenticationState> AuthStateTask { get; set; }
    [CascadingParameter] public required LaboratoryDetailDto Details { get; set; }
    [CascadingParameter] private IModalService ModalService { get; set; } = null!;

    private AuthenticationState AuthState { get; set; } = null!;

    protected async override Task OnParametersSetAsync()
    {
        AuthState = await AuthStateTask;
    }

    private bool CanManagePermissions(LaboratoryMemberDto memberToUpdate)
    {
        if (AuthState.User.FindFirst(BeaconClaimTypes.UserId)?.Value == memberToUpdate.Id.ToString())
            return false;

        if (Details.CurrentUserMembershipType is LaboratoryMembershipType.Admin)
            return true;

        return memberToUpdate.MembershipType is not LaboratoryMembershipType.Admin;
    }

    private async Task ShowInviteMemberModal()
    {
        await ModalService.Show<InviteMemberForm>("Invite Lab Member").Result;
    }

    private async Task ShowManagePermissionsModal(LaboratoryMemberDto memberToUpdate)
    {
        var modalParameters = new ModalParameters()
            .Add(nameof(UpdateMembershipTypeForm.MemberToUpdate), new LaboratoryMembershipDto
            {
                Laboratory = new LaboratoryDto { Id = Details.Id, Name = Details.Name },
                Member = memberToUpdate.ToUserDto(),
                MembershipType = memberToUpdate.MembershipType
            });

        await ModalService.Show<UpdateMembershipTypeForm>("Update Membership", modalParameters).Result;
    }
}
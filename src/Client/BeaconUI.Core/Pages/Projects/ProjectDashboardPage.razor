@page "/l/projects"
@attribute [Authorize]
@layout LaboratoryLayout

<div class="d-flex flex-column flex-grow-1" style="overflow-x: auto;">
    <LaboratoryPageHeader>
        <ButtonsContent>
            <button type="button" class="btn btn-primary" @onclick="ShowCreateProjectsModal">
                <span class="icon">
                    <i class="fa-solid fa-plus"></i>
                </span>
                <span>Create project</span>
            </button>
        </ButtonsContent>
    </LaboratoryPageHeader>

    <div class="content flex-grow-1" style="background-color: #f8fafc">
        <div class="px-4 h-100">
            @if (ProjectsOrError is not { } projectsOrError)
            {
                <p>Loading...</p>
            }
            else if (projectsOrError.IsError)
            {
                <p class="text-danger">There was an error loading lab projects. Please try again later.</p>
            }
            else if (projectsOrError.Value.Length == 0)
            {
                <p>No projects found!</p>
            }
            else
            {
                <ul>
                    @foreach (var project in projectsOrError.Value)
                    {
                        <li>
                            <a href="l/projects/@project.ProjectCode">@project.CustomerName (@project.ProjectCode)</a>
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter] public required IModalService ModalService { get; set; }

    private ErrorOr<ProjectDto[]>? ProjectsOrError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task ShowCreateProjectsModal()
    {
        var result = await ModalService.Show<CreateProjectForm>("Create New Project").Result;

        if (!result.Cancelled)
        {
            ProjectsOrError = null;
            await LoadProjects();
        }
    }

    private async Task LoadProjects()
    {
        ProjectsOrError = await ApiClient.GetProjects();        
    }
}
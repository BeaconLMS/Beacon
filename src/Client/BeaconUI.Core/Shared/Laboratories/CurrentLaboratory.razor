@inject NavigationManager NavManager
@implements IDisposable

@if (LabId != null)
{
    <MyLaboratories>
        @if (context.FirstOrDefault(m => m.Laboratory.Id == LabId)?.Laboratory is { } lab)
        {
            @ChildContent?.Invoke(lab)
        }
    </MyLaboratories>
}

@code {

    private Guid? LabId { get; set; }

    [Parameter] public RenderFragment<LaboratoryDto>? ChildContent { get; set; }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    protected override void OnInitialized()
    {
        NavManager.LocationChanged += HandleLocationChanged;
        TrySetLabId();
    }

    private void HandleLocationChanged(object? o, LocationChangedEventArgs e)
    {
        TrySetLabId();
        StateHasChanged();
    }

    private void TrySetLabId()
    {
        var labPageBase = $"{NavManager.BaseUri}laboratories/";

        if (!NavManager.Uri.StartsWith(labPageBase))
        {
            LabId = null;
            return;
        }

        var uriWithoutBase = NavManager.Uri.Replace(labPageBase, "");

        if (uriWithoutBase.Contains("/"))
            uriWithoutBase = uriWithoutBase.Substring(0, uriWithoutBase.IndexOf('/'));

        if (Guid.TryParse(uriWithoutBase, out var id))
        {
            LabId = id;
            return;
        }

        LabId = null;
    }
}
@using Beacon.Common.Requests.Projects

<BeaconForm Model="Model" OnValidSubmit="Submit">
    <Modal>
        <div class="modal-body">
            <div class="row">
                <div class="field">
                    <label class="form-label" for="customerName">Customer Name</label>
                    <InputText @bind-Value="Model.CustomerName" class="form-control" id="customerName" placeholder="e.g., Acme Corp" />
                    <ValidationMessage For="() => Model.CustomerName" />
                </div>
                <div class="field">
                    <label class="form-label" for="customerCode">Customer Code</label>
                    <InputText @bind-Value="Model.CustomerCode" class="form-control" id="customerCode" placeholder="e.g., ACM" />
                    <ValidationMessage For="() => Model.CustomerCode" />
                </div>
                <div class="field">
                    <label class="form-label" for="member">Lead Analyst</label>
                    <InputSelect @bind-Value="Model.LeadAnalystId" class="form-control" id="member">
                        <option>None</option>
                        @if (ErrorOrMembers == null)
                        {
                            <option disabled>Loading...</option>
                        }
                        else if (ErrorOrMembers.Value.IsError)
                        {
                            <option disabled class="text-danger">There was an error loading laboratory members</option>
                        }
                        else if (GetPotentialLeads(ErrorOrMembers.Value.Value) is not { Count: > 0} analysts)
                        {
                            <option disabled>There are no available analysts to assign to this project.</option>
                        }
                        else
                        {
                            foreach (var a in analysts)
                            {
                                <option value="@a.Id">@a.DisplayName</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Model.LeadAnalystId" />
                </div>
            </div>
        </div>
        <footer class="modal-footer">
            <SubmitButton class="btn btn-primary">Create Project</SubmitButton>
            <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
        </footer>
    </Modal>
</BeaconForm>

@code {

    [CascadingParameter]
    private BlazoredModalInstance Modal { get; set; } = null!;

    private CreateProjectRequest Model { get; } = new();

    private ErrorOr<LaboratoryMemberDto[]>? ErrorOrMembers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ErrorOrMembers = await ApiClient.GetLaboratoryMembers();
    }

    private async Task Submit(BeaconForm formContext)
    {
        var result = await ApiClient.CreateProject(Model);

        if (result.IsError)
        {
            formContext.AddErrors(result.Errors);
            return;
        }

        await Modal.CloseAsync(ModalResult.Ok());
    }

    private async Task Cancel() => await Modal.CancelAsync();

    private List<LaboratoryMemberDto> GetPotentialLeads(LaboratoryMemberDto[] list)
    {
        return list.Where(x => x.MembershipType >= LaboratoryMembershipType.Analyst).OrderBy(x => x.DisplayName).ToList();
    }
}
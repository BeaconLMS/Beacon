trigger:
  branches:
    include:
    - main

variables:
  solution: '**/*.sln'
  projects: |
    **/Beacon.WebHost.csproj
    **/BeaconUI.WebApp.csproj
  buildConfiguration: 'Release'

pool: 
  vmImage: 'windows-latest'

steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      useGlobalJson: true

  - task: DotNetCoreCLI@2
    displayName: 'Restore dependencies'
    inputs:
      command: 'restore'
      projects: '$(projects)'

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: build
      projects: '$(projects)'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Run tests'
    inputs:
      command: test
      projects: '**/tests/**/*.csproj'
      arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:ExcludeByFile="**/Migrations/*.cs"'
      publishTestResults: true

  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
      reportgenerator -reports:$(Agent.WorkFolder)\**\coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)\CodeCoverage -reporttypes:Cobertura
    displayName: 'Create code coverage report'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'

  - task: VSTest@2
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: |
        **\bin\$(BuildConfiguration)\**\*Test*.dll
        !**\obj\**
        !**\ref\**
        !**\xunit.runner.visualstudio.testadapter.dll
        !**\xunit.runner.visualstudio.dotnetcore.testadapter.dll
      searchFolder: '$(System.DefaultWorkingDirectory)'
      runTestsInIsolation: true
      codeCoverageEnabled: true

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    displayName: 'Install EF Core Tools'
    inputs:
      command: custom
      custom: tool
      arguments: install --global dotnet-ef

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    displayName: 'Generate Db Migrations Script'
    inputs:
      command: 'custom'
      custom: 'ef'
      arguments: migrations script --idempotent --output $(Build.ArtifactStagingDirectory)/Migrations.sql --project ./src/Server/Beacon.API/Beacon.API.csproj --startup-project ./src/Server/Beacon.WebHost/Beacon.WebHost.csproj

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    displayName: 'Publish web app'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '**/Beacon.WebHost.csproj'
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: false

  - task: PublishBuildArtifacts@1
    condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
    displayName: 'Publish artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'